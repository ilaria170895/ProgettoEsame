package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import core.exception.PazienteNotFound;
import core.paziente.Paziente;

public class Paziente_Dao {
	protected static java.util.Map<String,Paziente> restoredObjects= new java.util.HashMap<String,Paziente>();
	public static Paziente create(String CFPaziente) throws SQLException{
		Connection c = DBManager.getConnection();
		PreparedStatement preparedstat = c.prepareStatement("INSERT INTO Paziente (CODF) VALUES (?)");
		preparedstat.setString(1, CFPaziente);
		preparedstat.executeUpdate();
		preparedstat.close();
		Paziente paziente=new Paziente(CFPaziente);
		restoredObjects.put(CFPaziente, paziente);
		return paziente;

	}
	public static Paziente create() throws SQLException{
		Connection c = DBManager.getConnection();
		Statement stat = c.createStatement();
		String id;
		try {
			stat.executeUpdate("INSERT INTO Paziente (Nome,Cognome,Domicilio) VALUES (NULL,NULL,NULL)");
			ResultSet rs = stat.getGeneratedKeys();
			if (rs.next() == false) {
				throw new SQLException("ID value was not autogenerated!");
			}
			id = rs.getString(1);
		} finally {
			stat.close();	
		}
		
		Paziente paziente=new Paziente(id);
		restoredObjects.put(id, paziente);
		return paziente;

	}
	public static Paziente read(String CODFPaziente) throws SQLException, PazienteNotFound {
		if(CODFPaziente==null){
			throw new PazienteNotFound();
		}
		if(restoredObjects.containsKey(CODFPaziente)){
			return restoredObjects.get(CODFPaziente);
		}
		Connection connessione=DBManager.getConnection();
		PreparedStatement preparedStatement = connessione.prepareStatement("SELECT * FROM Paziente WHERE CODF=?");
		preparedStatement.setString(1, CODFPaziente);
		Paziente paziente = null;
		ResultSet rs= preparedStatement.executeQuery();
		if(rs.first()){
			if (!rs.wasNull()){
					paziente=new Paziente(rs.getString("CODF"),rs.getString("Nome"),
							rs.getString("Cognome"),rs.getString("Domicilio"));
				restoredObjects.put(CODFPaziente, paziente);
			}
		}
		else {
			throw new PazienteNotFound();
		}
		rs.close();
		preparedStatement.close();
		return paziente;
	}
	public static void update(Paziente paziente) throws SQLException, PazienteNotFound{
		if(paziente.getCodFiscale()==null){
			Paziente Paz = Paziente_Dao.create(); // Ottengo un nuovo id
			paziente.setCodFiscale(Paz.getCodFiscale());
			restoredObjects.put(paziente.getCodFiscale(), paziente); 

		}
		Connection connessione=DBManager.getConnection();
		PreparedStatement preparedStatement=connessione.prepareStatement("UPDATE Paziente SET Nome=? ,Cognome=?,Domicilio=? WHERE CODF=?");
		preparedStatement.setString(1,paziente.getNome());
		preparedStatement.setString(2, paziente.getCognome());
		preparedStatement.setString(3, paziente.getDomicilio());
		preparedStatement.setString(4, paziente.getCodFiscale());
		
		boolean rowaffected = preparedStatement.execute();
		if(!rowaffected){
			throw new PazienteNotFound();
		}
		DBManager.closeConnection();
	}
	
	public static void delete(Paziente paziente) throws SQLException {
		String CODF=paziente.getCodFiscale();
		if(CODF != null){
			Connection connection = DBManager.getConnection();
			PreparedStatement preparedStatement = connection.prepareStatement("DELETE FROM Paziente WHERE CODF=?");
			preparedStatement.setString(1, CODF);
			preparedStatement.executeUpdate();
			restoredObjects.remove(CODF);			
			paziente.setCodFiscale(null);
			preparedStatement.close();
		}
	}
}