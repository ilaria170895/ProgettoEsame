package dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import core.exception.InfermiereNotFound;
import core.exception.PazienteNotFound;
import core.exception.TerapiaNotFound;
import core.terapie.Terapia;



public class Terapia_Dao {

		protected static java.util.Map<Integer,Terapia> restoredObjects= new java.util.HashMap<Integer,Terapia>();
		public static Terapia create(Integer IDTerapia) throws SQLException{
			Connection c = DBManager.getConnection();
			PreparedStatement preparedstat = c.prepareStatement("INSERT INTO Terapia (ID) VALUES (?)");
			preparedstat.setInt(1, IDTerapia);
			preparedstat.executeUpdate();
			preparedstat.close();
			Terapia terapia=new Terapia(IDTerapia);
			restoredObjects.put(IDTerapia, terapia);
			return terapia;

		}
		public static Terapia create() throws SQLException{
			Connection c = DBManager.getConnection();
			Statement stat = c.createStatement();
			Integer id;
			try {
				stat.executeUpdate("INSERT INTO Terapia (DESCRIZIONE,DATAINIZIO,DATAFINE,PAZIENTE_CODF) VALUES (NULL,NULL,NULL,NULL)");
				ResultSet rs = stat.getGeneratedKeys();
				if (rs.next() == false) {
					throw new SQLException("ID value was not autogenerated!");
				}
				id = rs.getInt(1);
			} finally {
				stat.close();	
			}
			
			Terapia terapia=new Terapia(id);
			restoredObjects.put(id, terapia);
			return terapia;

		}
		public static Terapia read(Integer IDTerapia) throws SQLException, TerapiaNotFound, PazienteNotFound, InfermiereNotFound {
			if(IDTerapia==null){
				throw new TerapiaNotFound();
			}
			if(restoredObjects.containsKey(IDTerapia)){
				return restoredObjects.get(IDTerapia);
			}
			Connection connessione=DBManager.getConnection();
			PreparedStatement preparedStatement = connessione.prepareStatement("SELECT * FROM Terapia WHERE ID=?");
			PreparedStatement preparedStatement2 = connessione.prepareStatement("SELECT * FROM TERINFCROSS JOIN INFERMIERE ON INFERMIERE_CODF=CODF WHERE TERAPIA_ID=?");
			preparedStatement.setInt(1, IDTerapia);
			preparedStatement2.setInt(1, IDTerapia);
			Terapia terapia = null;
			ResultSet rs= preparedStatement.executeQuery();
			ResultSet rs2=preparedStatement2.executeQuery();
			if(rs.first()){
				if (!rs.wasNull()){
						terapia=new Terapia((Integer)rs.getInt("ID"),rs.getString("Descrizione"),
								rs.getDate("DATAINIZIO"),rs.getDate("DATAFINE"),Paziente_Dao.read(rs.getString("PAZIENTE_CODF")));
						while(rs2.next()){
							terapia.aggiungiInfermiere(Infermiere_Dao.read(rs2.getString("INFERMIERE_CODF")));
						}
					restoredObjects.put(IDTerapia, terapia);
				}
			}
			else {
				throw new TerapiaNotFound();
			}
			rs.close();
			preparedStatement.close();
			return terapia;
		}
		public static void update(Terapia terapia) throws SQLException, TerapiaNotFound{
			if(terapia.getID_Terapia()==null){
				Terapia Ter = Terapia_Dao.create(); // Ottengo un nuovo id
				terapia.setID_Terapia(Ter.getID_Terapia());
				restoredObjects.put(terapia.getID_Terapia(), terapia); 

			}
			Connection connessione=DBManager.getConnection();
			PreparedStatement preparedStatement=connessione.prepareStatement("UPDATE Terapia SET Descrizione=? ,DataInzio=?,DataFine=?,PAZIENTE_CODF=? WHERE ID=?");
			preparedStatement.setString(1,terapia.getDescrizione());
			preparedStatement.setDate(2,new Date(terapia.getDataInizio().getTime()));
			preparedStatement.setDate(3,new Date(terapia.getDataFine().getTime()));
			preparedStatement.setString(4, terapia.getPaziente().getCodFiscale());
			preparedStatement.setInt(5, terapia.getID_Terapia());
			
			boolean rowaffected = preparedStatement.execute();
			if(!rowaffected){
				throw new TerapiaNotFound();
			}
			for (int i=0;i<terapia.getInfermieri().size();i++){
				preparedStatement=connessione.prepareStatement("INSERT INTO TERINFCROSS (TERAPIA_ID,INFERMIERE_CODF) VALUES (?,?) ON DUPLICATE KEY UPDATE");
				preparedStatement.setInt(1, terapia.getID_Terapia());
				preparedStatement.setString(2, terapia.getInfermieri().get(i).getCodiceFiscale());
				preparedStatement.execute();
			}
			DBManager.closeConnection();
		}
		
		public static void delete(Terapia terapia) throws SQLException {
			Integer ID=terapia.getID_Terapia();
			if(ID != null){
				Connection connection = DBManager.getConnection();
				PreparedStatement preparedStatement = connection.prepareStatement("DELETE FROM Terapia WHERE ID=?");
				preparedStatement.setInt(1, ID);
				preparedStatement.executeUpdate();
				restoredObjects.remove(ID);			
				terapia.setID_Terapia(null);
				preparedStatement.close();
			}
		}
		public static ArrayList<Terapia> readall() throws SQLException, TerapiaNotFound, PazienteNotFound, InfermiereNotFound {
			Connection connessione=DBManager.getConnection();
			PreparedStatement preparedStatement = connessione.prepareStatement("SELECT * FROM Terapia");
			ArrayList<Terapia> listaterapie = new ArrayList<Terapia>();
			ResultSet rs= preparedStatement.executeQuery();
			while(rs.next()){
								Terapia terapia = new Terapia((Integer)rs.getInt("ID"),rs.getString("Descrizione"),
								rs.getDate("DATAINIZIO"),rs.getDate("DATAFINE"),Paziente_Dao.read(rs.getString("PAZIENTE_CODF")));
								PreparedStatement preparedStatement2 = connessione.prepareStatement("SELECT * FROM TERINFCROSS JOIN INFERMIERE ON INFERMIERE_CODF=CODF WHERE TERAPIA_ID=?");
								preparedStatement2.setInt(1, terapia.getID_Terapia());
								ResultSet rs2=preparedStatement2.executeQuery();
								while(rs2.next()){
									terapia.aggiungiInfermiere(Infermiere_Dao.read(rs2.getString("INFERMIERE_CODF")));
								}
								restoredObjects.put(terapia.getID_Terapia(), terapia);
								listaterapie.add(terapia);
			}

			rs.close();
			preparedStatement.close();
			return listaterapie;
		}

}
